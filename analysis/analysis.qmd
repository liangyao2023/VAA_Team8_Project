---
title: "Analysis"
author: "LIM Li Ying, YEN Yun-hsuan, LIANG YAO"
date: '4 June 2023'
date-modified: "`r Sys.Date()`"
execute: 
  warning: false
  echo: true
  eval: true
format: 
  html: 
    code-fold: true
    code-summary: "Show the code"
---

# 1. Load packages and data:

```{r}
pacman::p_load(igraph, ggraph, visNetwork, tidyverse, graphlayouts, jsonlite, heatmaply, tidygraph, plotly)
```

```{r}
mc2 <- jsonlite::fromJSON("data/mc2.json")
```

# 2. Data checking/cleaning:

## 2.1 Find the nodes and edges:

```{r}
#view(mc2[["nodes"]])
mc2_nodes <- as_tibble(mc2$nodes) %>%
  select(id, shpcountry, rcvcountry) %>%
  distinct()
```

```{r}
#view(mc2[["links"]])
mc2_edges <- as_tibble(mc2$links) %>%
  mutate(arrivaldate = ymd(arrivaldate)) %>%
  mutate(year = year(arrivaldate)) %>%
  select(source, target, weightkg, hscode, arrivaldate, year) %>%
  drop_na() %>%
  distinct()

mc2_edges <-  mc2_edges %>%
  mutate(from = with(mc2_nodes, id[match(mc2_edges$source, id)]))%>%
  mutate(to = with(mc2_nodes, id[match(mc2_edges$target, id)])) %>%
  distinct()
```

```{r}
glimpse(mc2_edges)
```

::: callout-note
### Note:

Here the 'arrivaldate' column of edges is treated as 'chr' datatype, would need to be changed to 'date' type. And a new column added to indicate years.
:::

## 2.2 Checking data distributions:

-   Distribution of shipments and weight(kg) by year:

```{r}
#| fig-width: 4
#| fig-height: 6
 
shipping <- mc2_edges %>%
         select(year, weightkg) %>%
         group_by(year) %>%
         summarise(count=n(),weightkg = sum(weightkg),kg_per_ship=weightkg/count)

d <- highlight_key(shipping)
p1 <- ggplot(data=d, 
            aes(x = year,
                y = count)) +
  geom_bar(stat = "identity") +
  xlab("Year") +
  ylab("Count")

p2 <- ggplot(data=d, 
            aes(x = year,
                y = weightkg)) +
  geom_bar(stat = "identity") +
  xlab("Year") +
  ylab("Weightkg")

p3 <- ggplot(data=d, 
            aes(x = year,
                y = kg_per_ship)) +
  geom_bar(stat = "identity") +
  xlab("Year") +
  ylab("average kg")

subplot(ggplotly(p1),
        ggplotly(p2),
        ggplotly(p3),
        shareX = TRUE,
        nrows = 3,
        titleY = TRUE)
```

::: callout-note
### Note:

Here we can conclude from the distribution of shipment by year that the weight per shipment of year 2032 is significantly higher than other years, indicating possible abnormal fishing volume in this year. For later using, we will focus on those hscode with most number of shipment during 2032.
:::

-   Check number of shipments and fishing weights in 2032 by hscode.

```{r}
hscode_count <-  mc2_edges %>%
  filter(year==2032) %>%
  select(hscode,weightkg) %>%
  group_by(hscode) %>%
  summarise(weightkg = sum(weightkg), count=n(), kg_per_ship=weightkg/count) %>%
  distinct() %>%
  arrange(desc(count))
hscode_count

hscode_topcount <- pull(head(hscode_count, 1),hscode)
hscode_top_avekg <- pull(head(hscode_count%>%
                                filter(count>1000) %>%
                                arrange(desc(kg_per_ship)),1),hscode)

sprintf("hscode with highest number of shipment: %s", hscode_topcount)
sprintf("hscode with highest weight(kg) per shipment: %s", hscode_top_avekg)

```

```{r}
hscode_count2034 <-  mc2_edges %>%
  filter(year==2034) %>%
  select(hscode,weightkg) %>%
  group_by(hscode) %>%
  summarise(weightkg = sum(weightkg), count=n(), kg_per_ship=weightkg/count) %>%
  distinct() %>%
  arrange(desc(count))
hscode_count2034

hscode_topcount2034 <- pull(head(hscode_count2034, 1),hscode)
hscode_top_avekg2034 <- pull(head(hscode_count2034%>%
                                filter(count>1000) %>%
                                arrange(desc(kg_per_ship)),1),hscode)

sprintf("hscode with highest number of shipment in 2034: %s", hscode_topcount2034)
sprintf("hscode with highest weight(kg) per shipment in 2034: %s", hscode_top_avekg2034)
```

# 3. Pattern Analysis & Visualization

## 3.1 Visualizing temporal patterns for individual entities by heatmap

### 3.1.1 Preparing data

Filter out those id with more than 20K count of shipements and transform the data table into matrix.

```{r}
mc2_selected_id <- pull(mc2_edges %>% 
                                 select(source) %>% 
                                 group_by(source) %>%
                                 summarize(count=n()) %>%
                                 filter(count > 20000) %>%
                                 distinct() %>%
                                 rename(id=source), 
                               id)

mc2_selected_companies <- mc2_edges %>%
  filter(source %in% mc2_selected_id) %>%
  select(source,year) %>%
  group_by(source,year) %>%
  summarize(shipment=n()) %>%
  pivot_wider(names_from = year, values_from = shipment, values_fill = 0) 

row.names(mc2_selected_companies) <- mc2_selected_companies$source
companies_matrix <- data.matrix(mc2_selected_companies)
```

### 3.1.2 Building heatmap

```{r}
#| fig-width: 6
#| fig-height: 8

heatmaply(normalize(companies_matrix[, -c(1, 5)]),
          Colv=NA,
          seriate = "none",
          colors = Blues,
          k_row = 5,
          margins = c(NA,200,60,NA),
          fontsize_row = 6,
          fontsize_col = 6,
          main="Companies' yearly trend of shipment counts",
          xlab = "Year",
          ylab = "Companies"
          )
```

## 3.2 Visualizing networks

### 3.2.1 Preparing data:

-   Filtering edges by 2032 and set count as weights.

```{r}
mc2_edges_aggregated <- mc2_edges %>%
  filter(year == 2032) %>%
  group_by(source, target, hscode, from, to) %>%
  summarise(weights = n(), ave_kg = sum(weightkg)/weights) %>%
  filter(source!=target) %>%
  ungroup()

glimpse(mc2_edges_aggregated)
```

### 3.2.2 Build network graph for hscode with highest shipment counts:

-   Find edges of hscode equal to "306170". And firstly focus on count of shipments more than once in a week(\>48).

```{r}
mc2_edges_topcount <- mc2_edges_aggregated %>%
  filter(hscode == hscode_topcount) %>%
  group_by(from, to) %>%
  summarise(weights = sum(weights)) %>%
  filter(from!=to) %>%
  filter(weights>48) %>%
  ungroup
```

-   Extract nodes. Check source and target companies, categorize them into "fisher" (nodes in "from" column) or "wholesaler" (nodes in "to" column).

```{r}
mc2_nodes_topcount <- rbind(mc2_edges_topcount %>%
                                select(from)%>%
                                rename(id=from) %>%
                             mutate(group="fisher"),
                              mc2_edges_topcount %>%
                                select(to)%>%
                                rename(id=to) %>%
                             mutate(group="wholesaler")) %>% distinct()
```

-   Check any nodes been categorized into both "fisher" and "wholesaler", mutate their group by higher weights.

```{r}
lookup_topcount <- mc2_nodes_topcount %>%
  group_by(id) %>%
  summarise(count=n()) %>%
  filter(count>1) %>%
  left_join(mc2_edges_topcount%>%
              group_by(from)%>%
              summarise(from_weights= sum(weights)),
            by=c("id"="from")) %>%
  left_join(mc2_edges_topcount%>%
              group_by(to)%>%
              summarise(to_weights=sum(weights)),
            by=c("id"="to")) %>%
  mutate(group=ifelse(from_weights >= to_weights, "fisher","wholesaler"))

mc2_nodes_topcount <- mc2_nodes_topcount %>%
  left_join(lookup_topcount%>%select(id,group),by="id") %>%
  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%
  select(-group.y,-group.x) %>%
  distinct()
```

-   Check mutual-exclusiveness of category.

```{r}
mc2_nodes_topcount %>%
  group_by(id) %>%
  summarise(count=n())%>%
  filter(count>1)
```

-   Build network graph.

```{r}
mc2_graph_topcount <- tbl_graph(nodes = mc2_nodes_topcount,
                       edges = mc2_edges_topcount,
                       directed = TRUE)
```

```{r}
mc2_graph_topcount %>%
  ggraph(layout = "fr") +
  geom_edge_link(aes(width=weights), 
                 alpha=0.8, color="lightblue",
                 arrow = arrow(length = unit(2, 'mm')), end_cap = circle(0, 'mm')) +
  scale_edge_width(range = c(0, 3)) +
  geom_node_point(aes(color=group, 
                  size = centrality_degree(mode = "out"))) + 
  scale_colour_manual(values=c("yellow","steelblue")) +
  labs(size= "Out_degree")+
  geom_node_text(aes(label=id), show.legend = FALSE, size=1.5) +
  theme_graph()
```

::: callout-notice
Here I used out-degree centrality as nodes' size to focus more on shippers.
:::

-   Check nodes with out-degree \>= 20, those fisher transit products to many different nodes, they may conduct unreported fishing and try to hide it in splitted transactions.

```{r}
mc2_graph_topcount %>%
    mutate(centrality = centrality_degree(mode = "out")) %>%
    filter(centrality>=20) %>%
    select(id,group) 
```

```{r}
#build interactive network graph for closer check of nodes
visNetwork(mc2_nodes_topcount,mc2_edges_topcount) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

Then let's checkout those edges with only 1 shipment during the year:

```{r}
mc2_edges_topcount_1time <- mc2_edges_aggregated %>%
  filter(hscode == hscode_topcount) %>%
  group_by(from, to) %>%
  summarise(weights = sum(weights)) %>%
  filter(from!=to) %>%
  filter(weights==1) %>%
  ungroup
```

```{r}
#categarize nodes into 2 groups and make sure the group label is mutual exclusive
mc2_nodes_topcount_1time <- rbind(mc2_edges_topcount_1time %>%
                                select(from)%>%
                                rename(id=from) %>%
                             mutate(group="fisher"),
                              mc2_edges_topcount_1time %>%
                                select(to)%>%
                                rename(id=to) %>%
                             mutate(group="wholesaler")) %>% distinct()

lookup_topcount_1time <- mc2_nodes_topcount_1time %>%
  group_by(id) %>%
  summarise(count=n()) %>%
  filter(count>1) %>%
  left_join(mc2_edges_topcount_1time%>%
              group_by(from)%>%
              summarise(from_weights= sum(weights)),
            by=c("id"="from")) %>%
  left_join(mc2_edges_topcount_1time%>%
              group_by(to)%>%
              summarise(to_weights=sum(weights)),
            by=c("id"="to")) %>%
  mutate(group=ifelse(from_weights >= to_weights, "fisher","wholesaler"))

mc2_nodes_topcount_1time <- mc2_nodes_topcount_1time %>%
  left_join(lookup_topcount_1time%>%select(id,group),by="id") %>%
  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%
  select(-group.y,-group.x) %>%
  distinct()
```

```{r}
#build interactive network graph
visNetwork(mc2_nodes_topcount_1time,mc2_edges_topcount_1time) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

::: callout-caution
Here from the graph of edges both with weights \>48 and weights == 1, we can see a basic pattern of transitons is that they are directed from multiple fishers to single wholesaler.
:::

### 3.2.3 Build network graph for hscodes with highest weight(kg) per shipment:

-   Find edges of the hscodes.

```{r}
mc2_edges_topkg <- mc2_edges_aggregated %>%
  filter(hscode == hscode_top_avekg) %>%
  group_by(from, to) %>%
  summarise(weights = sum(weights)) %>%
  filter(from!=to) %>%
#  filter(weights>1) %>%
  ungroup
```

-   Extract nodes. Check source and target companies, categorize them into "fisher" (nodes in "from" column) or "wholesaler" (nodes in "to" column).

```{r}
mc2_nodes_topkg <- rbind(mc2_edges_topkg %>%
                                select(from)%>%
                                rename(id=from) %>%
                             mutate(group="fisher"),
                              mc2_edges_topkg %>%
                                select(to)%>%
                                rename(id=to) %>%
                             mutate(group="wholesaler")) %>% distinct()

lookup_topkg <- mc2_nodes_topkg %>%
  group_by(id) %>%
  summarise(count=n()) %>%
  filter(count>1) %>%
  left_join(mc2_edges_topkg%>%
              group_by(from)%>%
              summarise(from_weights= sum(weights)),
            by=c("id"="from")) %>%
  left_join(mc2_edges_topkg%>%
              group_by(to)%>%
              summarise(to_weights=sum(weights)),
            by=c("id"="to")) %>%
  mutate(group=ifelse(from_weights >= to_weights, "fisher","wholesaler"))

mc2_nodes_topkg <- mc2_nodes_topkg %>%
  left_join(lookup_topkg%>%select(id,group),by="id") %>%
  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%
  select(-group.y,-group.x) %>%
  distinct()
```

-   Check mutual-exclusiveness of category.

```{r}
mc2_nodes_topcount %>%
  group_by(id) %>%
  summarise(count=n())%>%
  filter(count>1)
```

-   Build interactive network graph.

```{r}
visNetwork(mc2_nodes_topkg,mc2_edges_topkg) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

::: callout-caution
Here we find the transition pattern is more of directed from one fisher to multiple wholesaler, this may due to the average weight(kg) of the product if relatively higher, so different parts of fish need to sale to different dealers.
:::

## 3.3 Evaluate the sets of predicted knowledge graph links FishEye has provided

### 3.3.1 Read provided json files:

Firstly read all 12 files provided by Fisheye into one table.

```{r}
files <- list.files(path = "data/bundles", full.names = TRUE)

fisheye_files <- lapply(files, fromJSON)
fisheyedata <- lapply(fisheye_files, function(json) {
  json$nodes
  json$links
})

fisheye <- bind_rows(fisheyedata)
```

```{r}
fisheye_edges <- as_tibble(fisheye) %>%
  mutate(arrivaldate = ymd(arrivaldate)) %>%
  mutate(year = year(arrivaldate)) %>%
  mutate(hscode = as.character(hscode)) %>%
  select(source, target, generated_by, hscode, arrivaldate, year,weightkg) %>%
  rename(type = generated_by) %>%
#  drop_na() %>%
  distinct()
```

Then check number of edges by year and by "generagted_by" (here I renamed this column as "group")

```{r}
fisheye_count <-  fisheye_edges %>%
  select(year,type,weightkg) %>%
  group_by(year,type) %>%
  summarise(count= n(),weightkg = sum(weightkg)) %>%
  arrange(year)

fisheye_count
```

### 3.3.2 Data wrangling for network graph:

```{r}
fisheye_edges_aggregated <- fisheye_edges %>%
  group_by(source, target, hscode, year, type) %>%
    summarise(weights = n()) %>%
  filter(source!=target) %>%
  ungroup()
```

```{r}
fisheye_nodes_extracted <- rbind(fisheye_edges_aggregated %>%
  select(source,type) %>%
  rename(id = source), 
  fisheye_edges_aggregated %>%
  select(target,type) %>%
  rename(id = target)) %>%
  distinct()
```

### 3.3.3 Visualize graph provided by Fisheye:

```{r}
fisheye_graph <- tbl_graph(nodes = fisheye_nodes_extracted,
                       edges = fisheye_edges_aggregated,
                       directed = TRUE)
```

```{r}
set_graph_style() 

ggraph(fisheye_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(linewidth=weights), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(), size = 0.5) +
  theme(legend.position = 'bottom')+ 
  facet_nodes(~type)+
  th_foreground(foreground = "grey90",  
                border = TRUE)  
```

::: callout-caution
### Minding Here:

I will firstly choose those set of links with more nodes. The final choice can be made only after we saw the complementary effect after we add those links to original network.
:::

-   Build network graph for selected set of links:

```{r}
selected_links <- c('carp','catfish','chub_mackerel','herring','mackerel','pollock','salmon_wgl')

fisheye_selected_edges <- fisheye_edges_aggregated %>%
  filter(type %in% selected_links) %>%
  rename(from = source) %>%
  rename(to = target) %>%
  filter(from != to) %>%
  distinct()

fisheye_selected_nodes <- rbind(fisheye_selected_edges %>%
                                select(from)%>%
                                rename(id=from)%>%
                                  mutate(group = "fisher"),
                                fisheye_selected_edges %>%
                                select(to)%>%
                                rename(id=to)%>%
                                  mutate(group = "wholesaler")) %>% distinct()
```

-   Extract nodes and categorize.

```{r}
fisheye_lookup <- fisheye_selected_nodes %>%
  group_by(id) %>%
  summarise(count=n()) %>%
  filter(count>1) %>%
  left_join(fisheye_selected_edges%>%
              group_by(from)%>%
              summarise(from_weights= sum(weights)),
            by=c("id"="from")) %>%
  left_join(fisheye_selected_edges%>%
              group_by(to)%>%
              summarise(to_weights=sum(weights)),
            by=c("id"="to")) %>%
  mutate(group=ifelse(from_weights >= to_weights | is.na(to_weights), "fisher","wholesaler"))

fisheye_selected_nodes <- fisheye_selected_nodes %>%
  left_join(fisheye_lookup%>%select(id,group),by="id") %>%
  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%
  select(-group.y,-group.x) %>%
  distinct()
```

-   Check the mutual exclusiveness of categories

```{r}
fisheye_selected_nodes %>%
  group_by(id) %>%
  summarise(count=n()) %>%
  filter(count>1)
```

-   Build network graph of selected bundles

```{r}
#| fig-width: 5
#| fig-height: 5

fisheye_selected_graph <- tbl_graph(nodes = fisheye_selected_nodes,
                       edges = fisheye_selected_edges,
                       directed = TRUE)
visNetwork(fisheye_selected_nodes,fisheye_selected_edges) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

## 3.4 Combine selected bundles with original network

-   Combine edges

```{r}
mc2_edges_new <- rbind(fisheye_selected_edges%>%
                         group_by(from,to,hscode,year) %>%
                         summarise(weights=sum(weights)),
                       mc2_edges%>%
                         group_by(from,to,hscode,year) %>%
                         summarise(weights=n()))
```

-   Check any new edges not included in original network:

```{r}
anti_join(mc2_edges, mc2_edges_new,by=c('from','to'))
```

-   Check hscode distribution:

```{r}
hscode_count_new <-  mc2_edges_new %>%
  filter(year==2034) %>%
  group_by(hscode) %>%
  summarise(weights = sum(weights)) %>%
  distinct() %>%
  left_join(hscode_count2034%>%select(hscode,count),by='hscode') %>%
  rename(origin_weights=count) %>%
  mutate(new_ori_gap=weights-origin_weights) %>%
  arrange(desc(new_ori_gap)) 
hscode_count_new

hscode_topcount_new <- pull(head(hscode_count_new%>%arrange(desc(weights)), 1),hscode)
hscode_selected <-  pull(head(hscode_count_new, 1),hscode)
sprintf("hscode with highest number of shipment in new network: %s", hscode_topcount_new)
sprintf("hscode with most change from origin network to new network: %s", hscode_selected)
```

## 3.5 Compare Original Network with New Network

### 3.5.1 Graph of original network

-   Edge of origin network in 2034 aggregate:

```{r}
mc2_edges_aggregated2034 <- mc2_edges %>%
  filter(year == 2034) %>%
  group_by(source, target, hscode, from, to) %>%
  summarise(weights = n(), ave_kg = sum(weightkg)/weights) %>%
  filter(source!=target) %>%
  ungroup()

glimpse(mc2_edges_aggregated2034)
```

-   Find edges of the hscode in 2034 in original network

```{r}
mc2_edges_selected <- mc2_edges_aggregated2034 %>%
  filter(hscode == hscode_selected) %>%
  group_by(from, to) %>%
  summarise(weights = sum(weights)) %>%
  filter(from!=to) %>%
  filter(weights>12) %>%
  ungroup
```

-   Extract nodes and categorize

```{r}
mc2_nodes_selected <- rbind(mc2_edges_selected %>%
                                select(from)%>%
                                rename(id=from) %>%
                             mutate(group="fisher"),
                              mc2_edges_selected %>%
                                select(to)%>%
                                rename(id=to) %>%
                             mutate(group="wholesaler")) %>% distinct()

lookup_selected <- mc2_nodes_selected %>%
  group_by(id) %>%
  summarise(count=n()) %>%
  filter(count>1) %>%
  left_join(mc2_edges_selected%>%
              group_by(from)%>%
              summarise(from_weights= sum(weights)),
            by=c("id"="from")) %>%
  left_join(mc2_edges_selected%>%
              group_by(to)%>%
              summarise(to_weights=sum(weights)),
            by=c("id"="to")) %>%
  mutate(group=ifelse(from_weights >= to_weights, "fisher","wholesaler"))

mc2_nodes_selected <- mc2_nodes_selected %>%
  left_join(lookup_selected%>%select(id,group),by="id") %>%
  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%
  select(-group.y,-group.x) %>%
  distinct()
```

-   Build network graph

```{r}
mc2_graph_selected <- tbl_graph(nodes = mc2_nodes_selected,
                       edges = mc2_edges_selected,
                       directed = TRUE)

mc2_graph_selected %>%
  ggraph(layout = "fr") +
  geom_edge_link(aes(width=weights,arrow=TRUE), 
                 alpha=0.8, color="lightblue",
                 arrow = arrow(length = unit(2, 'mm')), end_cap = circle(0, 'mm')) +
  scale_edge_width(range = c(0.5, 3)) +
  geom_node_point(aes(color=group,
                      size = centrality_degree(mode = "out"))) + 
  scale_colour_manual(values=c("yellow","steelblue")) +
  labs(size= "Out_degree")+
  geom_node_text(aes(label=id), show.legend = FALSE, size=2) +
  theme_graph()
```

### 3.5.2 Graph of new network of the same hscode in 2034

-   Since the selected bundle are mainly data of 2034, here we will focus on edges of Year 2034.

```{r}
mc2_edges_newaggre <- mc2_edges_new %>%
  filter(year == 2034) %>%
  group_by(from, to, hscode) %>%
  summarise(weights = sum(weights)) %>%
  filter(from!=to) %>%
#  filter(weights>100) %>%
  ungroup()

glimpse(mc2_edges_newaggre)
```

-   Find edges of hscode in new network

```{r}
mc2_edges_selected_new <- mc2_edges_newaggre %>%
  filter(hscode == hscode_selected) %>%
  group_by(from, to) %>%
  summarise(weights = sum(weights)) %>%
  filter(from!=to) %>%
  filter(weights>12) %>%
  ungroup
```

-   Extract nodes and categorize

```{r}
mc2_nodes_selected_new <- rbind(mc2_edges_selected_new %>%
                                select(from)%>%
                                rename(id=from) %>%
                             mutate(group="fisher"),
                              mc2_edges_selected_new %>%
                                select(to)%>%
                                rename(id=to) %>%
                             mutate(group="wholesaler")) %>% distinct()

lookup_selected_new <- mc2_nodes_selected_new %>%
  group_by(id) %>%
  summarise(count=n()) %>%
  filter(count>1) %>%
  left_join(mc2_edges_selected_new%>%
              group_by(from)%>%
              summarise(from_weights= sum(weights)),
            by=c("id"="from")) %>%
  left_join(mc2_edges_selected_new%>%
              group_by(to)%>%
              summarise(to_weights=sum(weights)),
            by=c("id"="to")) %>%
  mutate(group=ifelse(from_weights >= to_weights, "fisher","wholesaler"))

mc2_nodes_selected_new <- mc2_nodes_selected_new %>%
  left_join(lookup_selected_new%>%select(id,group),by="id") %>%
  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%
  select(-group.y,-group.x) %>%
  distinct()
```

-   Build network graph

```{r}
mc2_graph_selected_new <- tbl_graph(nodes = mc2_nodes_selected_new,
                       edges = mc2_edges_selected_new,
                       directed = TRUE)

mc2_graph_selected_new %>%
  ggraph(layout = "fr") +
  geom_edge_link(aes(width=weights), 
                 alpha=0.8, color="lightblue",
                 arrow = arrow(length = unit(2, 'mm')), end_cap = circle(0, 'mm')) +
  scale_edge_width(range = c(0.5,3)) +
  geom_node_point(aes(color=group, 
                  size = centrality_degree(mode = "out"))) + 
  scale_colour_manual(values=c("yellow","steelblue")) +
  labs(size= "Out_degree")+
  geom_node_text(aes(label=id), show.legend = FALSE, size=2) +
  theme_graph()
```

-   nodes with outdegree more than 3 in original network

```{r}
mc2_graph_selected %>%
    mutate(centrality = centrality_degree(mode = "out")) %>%
    filter(centrality>5) %>%
    select(id,group) 
```

-   nodes with outdegree more than 3 in new network

```{r}
mc2_graph_selected_new %>%
    mutate(centrality = centrality_degree(mode = "out")) %>%
    filter(centrality>5) %>%
    select(id,group) 
```

-   Interactive graph of original network

```{r}
#| fig-width: 5
#| fig-height: 5

visNetwork(mc2_nodes_selected,mc2_edges_selected) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

-   Interactive graph of new network

```{r}
#| fig-width: 5
#| fig-height: 5

visNetwork(mc2_nodes_selected_new,mc2_edges_selected_new) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

Try to build community of original network

```{r}
mc2_graph_selected_und <- as.undirected(mc2_graph_selected, mode='collapse')

mc2_graph_selected_no_iso <- igraph::delete.vertices(mc2_graph_selected_und, V(mc2_graph_selected_und)[igraph::degree(mc2_graph_selected_und)==0])

community_selected <- cluster_leading_eigen(graph=mc2_graph_selected_no_iso)

plot(community_selected,mc2_graph_selected_no_iso)
```

Try to build community of new network

```{r}
mc2_graph_selected_und_new <- as.undirected(mc2_graph_selected_new, mode='collapse')

mc2_graph_selected_no_iso_new <- igraph::delete.vertices(mc2_graph_selected_und_new, V(mc2_graph_selected_und_new)[igraph::degree(mc2_graph_selected_und_new)==0])

community_selected_new <- cluster_leading_eigen(graph=mc2_graph_selected_no_iso_new)

plot(community_selected_new,mc2_graph_selected_no_iso_new)
```
