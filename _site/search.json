[
  {
    "objectID": "analysis/analysis.html",
    "href": "analysis/analysis.html",
    "title": "Analysis",
    "section": "",
    "text": "Show the code\npacman::p_load(igraph, ggraph, visNetwork, tidyverse, graphlayouts, jsonlite, heatmaply, tidygraph, plotly)\n\n\n\n\nShow the code\nmc2 <- jsonlite::fromJSON(\"data/mc2.json\")"
  },
  {
    "objectID": "analysis/analysis.html#find-the-nodes-and-edges",
    "href": "analysis/analysis.html#find-the-nodes-and-edges",
    "title": "Analysis",
    "section": "2.1 Find the nodes and edges:",
    "text": "2.1 Find the nodes and edges:\n\n\nShow the code\n#view(mc2[[\"nodes\"]])\nmc2_nodes <- as_tibble(mc2$nodes) %>%\n  select(id, shpcountry, rcvcountry) %>%\n  distinct()\n\n\n\n\nShow the code\n#view(mc2[[\"links\"]])\nmc2_edges <- as_tibble(mc2$links) %>%\n  mutate(arrivaldate = ymd(arrivaldate)) %>%\n  mutate(year = year(arrivaldate)) %>%\n  select(source, target, weightkg, hscode, arrivaldate, year) %>%\n  drop_na() %>%\n  distinct()\n\nmc2_edges <-  mc2_edges %>%\n  mutate(from = with(mc2_nodes, id[match(mc2_edges$source, id)]))%>%\n  mutate(to = with(mc2_nodes, id[match(mc2_edges$target, id)])) %>%\n  distinct()\n\n\n\n\nShow the code\nglimpse(mc2_edges)\n\n\nRows: 5,190,407\nColumns: 8\n$ source      <chr> \"AquaDelight Inc and Son's\", \"AquaDelight Inc and Son's\", …\n$ target      <chr> \"BaringoAmerica Marine Ges.m.b.H.\", \"BaringoAmerica Marine…\n$ weightkg    <int> 4780, 6125, 10855, 11250, 11165, 11290, 9000, 19490, 6865,…\n$ hscode      <chr> \"630630\", \"630630\", \"470710\", \"470710\", \"470710\", \"470710\"…\n$ arrivaldate <date> 2034-02-12, 2034-03-13, 2028-02-07, 2028-02-23, 2028-09-1…\n$ year        <dbl> 2034, 2034, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028…\n$ from        <chr> \"AquaDelight Inc and Son's\", \"AquaDelight Inc and Son's\", …\n$ to          <chr> \"BaringoAmerica Marine Ges.m.b.H.\", \"BaringoAmerica Marine…\n\n\n\n\n\n\n\n\nNote:\n\n\n\nHere the ‘arrivaldate’ column of edges is treated as ‘chr’ datatype, would need to be changed to ‘date’ type. And a new column added to indicate years."
  },
  {
    "objectID": "analysis/analysis.html#checking-data-distributions",
    "href": "analysis/analysis.html#checking-data-distributions",
    "title": "Analysis",
    "section": "2.2 Checking data distributions:",
    "text": "2.2 Checking data distributions:\n\nDistribution of shipments and weight(kg) by year:\n\n\n\nShow the code\nshipping <- mc2_edges %>%\n         select(year, weightkg) %>%\n         group_by(year) %>%\n         summarise(count=n(),weightkg = sum(weightkg),kg_per_ship=weightkg/count)\n\nd <- highlight_key(shipping)\np1 <- ggplot(data=d, \n            aes(x = year,\n                y = count)) +\n  geom_bar(stat = \"identity\") +\n  xlab(\"Year\") +\n  ylab(\"Count\")\n\np2 <- ggplot(data=d, \n            aes(x = year,\n                y = weightkg)) +\n  geom_bar(stat = \"identity\") +\n  xlab(\"Year\") +\n  ylab(\"Weightkg\")\n\np3 <- ggplot(data=d, \n            aes(x = year,\n                y = kg_per_ship)) +\n  geom_bar(stat = \"identity\") +\n  xlab(\"Year\") +\n  ylab(\"average kg\")\n\nsubplot(ggplotly(p1),\n        ggplotly(p2),\n        ggplotly(p3),\n        shareX = TRUE,\n        nrows = 3,\n        titleY = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\nNote:\n\n\n\nHere we can conclude from the distribution of shipment by year that the weight per shipment of year 2032 is significantly higher than other years, indicating possible abnormal fishing volume in this year. For later using, we will focus on those hscode with most number of shipment during 2032.\n\n\n\nCheck number of shipments and fishing weights in 2032 by hscode.\n\n\n\nShow the code\nhscode_count <-  mc2_edges %>%\n  filter(year==2032) %>%\n  select(hscode,weightkg) %>%\n  group_by(hscode) %>%\n  summarise(weightkg = sum(weightkg), count=n(), kg_per_ship=weightkg/count) %>%\n  distinct() %>%\n  arrange(desc(count))\nhscode_count\n\n\n# A tibble: 3,864 × 4\n   hscode   weightkg count kg_per_ship\n   <chr>       <dbl> <int>       <dbl>\n 1 306170  477204630 24772      19264.\n 2 940360  181475405 14794      12267.\n 3 870899  479390615 14255      33630.\n 4 611020   75241440 13321       5648.\n 5 950300  105203525 12274       8571.\n 6 304620  216078950  9958      21699.\n 7 870323 2578623605  9313     276884.\n 8 640299   86822135  8815       9849.\n 9 160414  477284410  8762      54472.\n10 940161   92760155  8528      10877.\n# ℹ 3,854 more rows\n\n\nShow the code\nhscode_topcount <- pull(head(hscode_count, 1),hscode)\nhscode_top_avekg <- pull(head(hscode_count%>%\n                                filter(count>1000) %>%\n                                arrange(desc(kg_per_ship)),1),hscode)\n\nsprintf(\"hscode with highest number of shipment: %s\", hscode_topcount)\n\n\n[1] \"hscode with highest number of shipment: 306170\"\n\n\nShow the code\nsprintf(\"hscode with highest weight(kg) per shipment: %s\", hscode_top_avekg)\n\n\n[1] \"hscode with highest weight(kg) per shipment: 721049\"\n\n\n\n\nShow the code\nhscode_count2034 <-  mc2_edges %>%\n  filter(year==2034) %>%\n  select(hscode,weightkg) %>%\n  group_by(hscode) %>%\n  summarise(weightkg = sum(weightkg), count=n(), kg_per_ship=weightkg/count) %>%\n  distinct() %>%\n  arrange(desc(count))\nhscode_count2034\n\n\n# A tibble: 3,838 × 4\n   hscode  weightkg count kg_per_ship\n   <chr>      <dbl> <int>       <dbl>\n 1 306170 495816060 25546      19409.\n 2 950300 163229765 15259      10697.\n 3 870899 423348515 14534      29128.\n 4 160414 449883290  9612      46804.\n 5 841810  82450220  8837       9330.\n 6 640299  70849595  8314       8522.\n 7 392410  81447950  7775      10476.\n 8 940360  87896380  7693      11426.\n 9 392690  79033600  7682      10288.\n10 640399  57566370  7027       8192.\n# ℹ 3,828 more rows\n\n\nShow the code\nhscode_topcount2034 <- pull(head(hscode_count2034, 1),hscode)\nhscode_top_avekg2034 <- pull(head(hscode_count2034%>%\n                                filter(count>1000) %>%\n                                arrange(desc(kg_per_ship)),1),hscode)\n\nsprintf(\"hscode with highest number of shipment in 2034: %s\", hscode_topcount2034)\n\n\n[1] \"hscode with highest number of shipment in 2034: 306170\"\n\n\nShow the code\nsprintf(\"hscode with highest weight(kg) per shipment in 2034: %s\", hscode_top_avekg2034)\n\n\n[1] \"hscode with highest weight(kg) per shipment in 2034: 870323\""
  },
  {
    "objectID": "analysis/analysis.html#visualizing-temporal-patterns-for-individual-entities-by-heatmap",
    "href": "analysis/analysis.html#visualizing-temporal-patterns-for-individual-entities-by-heatmap",
    "title": "Analysis",
    "section": "3.1 Visualizing temporal patterns for individual entities by heatmap",
    "text": "3.1 Visualizing temporal patterns for individual entities by heatmap\n\n3.1.1 Preparing data\nFilter out those id with more than 20K count of shipements and transform the data table into matrix.\n\n\nShow the code\nmc2_selected_id <- pull(mc2_edges %>% \n                                 select(source) %>% \n                                 group_by(source) %>%\n                                 summarize(count=n()) %>%\n                                 filter(count > 20000) %>%\n                                 distinct() %>%\n                                 rename(id=source), \n                               id)\n\nmc2_selected_companies <- mc2_edges %>%\n  filter(source %in% mc2_selected_id) %>%\n  select(source,year) %>%\n  group_by(source,year) %>%\n  summarize(shipment=n()) %>%\n  pivot_wider(names_from = year, values_from = shipment, values_fill = 0) \n\nrow.names(mc2_selected_companies) <- mc2_selected_companies$source\ncompanies_matrix <- data.matrix(mc2_selected_companies)\n\n\n\n\n3.1.2 Building heatmap\n\n\nShow the code\nheatmaply(normalize(companies_matrix[, -c(1, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 6,\n          fontsize_col = 6,\n          main=\"Companies' yearly trend of shipment counts\",\n          xlab = \"Year\",\n          ylab = \"Companies\"\n          )"
  },
  {
    "objectID": "analysis/analysis.html#visualizing-networks",
    "href": "analysis/analysis.html#visualizing-networks",
    "title": "Analysis",
    "section": "3.2 Visualizing networks",
    "text": "3.2 Visualizing networks\n\n3.2.1 Preparing data:\n\nFiltering edges by 2032 and set count as weights.\n\n\n\nShow the code\nmc2_edges_aggregated <- mc2_edges %>%\n  filter(year == 2032) %>%\n  group_by(source, target, hscode, from, to) %>%\n  summarise(weights = n(), ave_kg = sum(weightkg)/weights) %>%\n  filter(source!=target) %>%\n  ungroup()\n\nglimpse(mc2_edges_aggregated)\n\n\nRows: 152,980\nColumns: 7\n$ source  <chr> \" Direct Herring Company Transit\", \" Direct Herring Company Tr…\n$ target  <chr> \"Caracola Azul NV Nautical\", \"Caracola Azul NV Nautical\", \"Lim…\n$ hscode  <chr> \"160529\", \"306170\", \"841430\", \"330430\", \"392310\", \"392330\", \"3…\n$ from    <chr> \" Direct Herring Company Transit\", \" Direct Herring Company Tr…\n$ to      <chr> \"Caracola Azul NV Nautical\", \"Caracola Azul NV Nautical\", \"Lim…\n$ weights <int> 3, 2, 4, 1, 1, 1, 3, 1, 1, 1, 1, 2, 2, 9, 9, 1, 1, 1, 1, 1, 2,…\n$ ave_kg  <dbl> 10745.000, 18422.500, 3725.000, 320.000, 6645.000, 6645.000, 1…\n\n\n\n\n3.2.2 Build network graph for hscode with highest shipment counts:\n\nFind edges of hscode equal to “306170”. And firstly focus on count of shipments more than once in a week(>48).\n\n\n\nShow the code\nmc2_edges_topcount <- mc2_edges_aggregated %>%\n  filter(hscode == hscode_topcount) %>%\n  group_by(from, to) %>%\n  summarise(weights = sum(weights)) %>%\n  filter(from!=to) %>%\n  filter(weights>48) %>%\n  ungroup\n\n\n\nExtract nodes. Check source and target companies, categorize them into “fisher” (nodes in “from” column) or “wholesaler” (nodes in “to” column).\n\n\n\nShow the code\nmc2_nodes_topcount <- rbind(mc2_edges_topcount %>%\n                                select(from)%>%\n                                rename(id=from) %>%\n                             mutate(group=\"fisher\"),\n                              mc2_edges_topcount %>%\n                                select(to)%>%\n                                rename(id=to) %>%\n                             mutate(group=\"wholesaler\")) %>% distinct()\n\n\n\nCheck any nodes been categorized into both “fisher” and “wholesaler”, mutate their group by higher weights.\n\n\n\nShow the code\nlookup_topcount <- mc2_nodes_topcount %>%\n  group_by(id) %>%\n  summarise(count=n()) %>%\n  filter(count>1) %>%\n  left_join(mc2_edges_topcount%>%\n              group_by(from)%>%\n              summarise(from_weights= sum(weights)),\n            by=c(\"id\"=\"from\")) %>%\n  left_join(mc2_edges_topcount%>%\n              group_by(to)%>%\n              summarise(to_weights=sum(weights)),\n            by=c(\"id\"=\"to\")) %>%\n  mutate(group=ifelse(from_weights >= to_weights, \"fisher\",\"wholesaler\"))\n\nmc2_nodes_topcount <- mc2_nodes_topcount %>%\n  left_join(lookup_topcount%>%select(id,group),by=\"id\") %>%\n  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%\n  select(-group.y,-group.x) %>%\n  distinct()\n\n\n\nCheck mutual-exclusiveness of category.\n\n\n\nShow the code\nmc2_nodes_topcount %>%\n  group_by(id) %>%\n  summarise(count=n())%>%\n  filter(count>1)\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: id <chr>, count <int>\n\n\n\nBuild network graph.\n\n\n\nShow the code\nmc2_graph_topcount <- tbl_graph(nodes = mc2_nodes_topcount,\n                       edges = mc2_edges_topcount,\n                       directed = TRUE)\n\n\n\n\nShow the code\nmc2_graph_topcount %>%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(width=weights), \n                 alpha=0.8, color=\"lightblue\",\n                 arrow = arrow(length = unit(2, 'mm')), end_cap = circle(0, 'mm')) +\n  scale_edge_width(range = c(0, 3)) +\n  geom_node_point(aes(color=group, \n                  size = centrality_degree(mode = \"out\"))) + \n  scale_colour_manual(values=c(\"yellow\",\"steelblue\")) +\n  labs(size= \"Out_degree\")+\n  geom_node_text(aes(label=id), show.legend = FALSE, size=1.5) +\n  theme_graph()\n\n\n\n\n\n\n\n\n\n\n\nNotice\n\n\n\nHere I used out-degree centrality as nodes’ size to focus more on shippers.\n\n\n\nCheck nodes with out-degree >= 20, those fisher transit products to many different nodes, they may conduct unreported fishing and try to hide it in splitted transactions.\n\n\n\nShow the code\nmc2_graph_topcount %>%\n    mutate(centrality = centrality_degree(mode = \"out\")) %>%\n    filter(centrality>=20) %>%\n    select(id,group) \n\n\n# A tbl_graph: 0 nodes and 0 edges\n#\n# An empty graph\n#\n# A tibble: 0 × 2\n# ℹ 2 variables: id <chr>, group <chr>\n#\n# A tibble: 0 × 3\n# ℹ 3 variables: from <int>, to <int>, weights <int>\n\n\n\n\nShow the code\n#build interactive network graph for closer check of nodes\nvisNetwork(mc2_nodes_topcount,mc2_edges_topcount) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nThen let’s checkout those edges with only 1 shipment during the year:\n\n\nShow the code\nmc2_edges_topcount_1time <- mc2_edges_aggregated %>%\n  filter(hscode == hscode_topcount) %>%\n  group_by(from, to) %>%\n  summarise(weights = sum(weights)) %>%\n  filter(from!=to) %>%\n  filter(weights==1) %>%\n  ungroup\n\n\n\n\nShow the code\n#categarize nodes into 2 groups and make sure the group label is mutual exclusive\nmc2_nodes_topcount_1time <- rbind(mc2_edges_topcount_1time %>%\n                                select(from)%>%\n                                rename(id=from) %>%\n                             mutate(group=\"fisher\"),\n                              mc2_edges_topcount_1time %>%\n                                select(to)%>%\n                                rename(id=to) %>%\n                             mutate(group=\"wholesaler\")) %>% distinct()\n\nlookup_topcount_1time <- mc2_nodes_topcount_1time %>%\n  group_by(id) %>%\n  summarise(count=n()) %>%\n  filter(count>1) %>%\n  left_join(mc2_edges_topcount_1time%>%\n              group_by(from)%>%\n              summarise(from_weights= sum(weights)),\n            by=c(\"id\"=\"from\")) %>%\n  left_join(mc2_edges_topcount_1time%>%\n              group_by(to)%>%\n              summarise(to_weights=sum(weights)),\n            by=c(\"id\"=\"to\")) %>%\n  mutate(group=ifelse(from_weights >= to_weights, \"fisher\",\"wholesaler\"))\n\nmc2_nodes_topcount_1time <- mc2_nodes_topcount_1time %>%\n  left_join(lookup_topcount_1time%>%select(id,group),by=\"id\") %>%\n  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%\n  select(-group.y,-group.x) %>%\n  distinct()\n\n\n\n\nShow the code\n#build interactive network graph\nvisNetwork(mc2_nodes_topcount_1time,mc2_edges_topcount_1time) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\n\n\nDanger\n\n\n\nHere from the graph of edges both with weights >48 and weights == 1, we can see a basic pattern of transitons is that they are directed from multiple fishers to single wholesaler.\n\n\n\n\n3.2.3 Build network graph for hscodes with highest weight(kg) per shipment:\n\nFind edges of the hscodes.\n\n\n\nShow the code\nmc2_edges_topkg <- mc2_edges_aggregated %>%\n  filter(hscode == hscode_top_avekg) %>%\n  group_by(from, to) %>%\n  summarise(weights = sum(weights)) %>%\n  filter(from!=to) %>%\n#  filter(weights>1) %>%\n  ungroup\n\n\n\nExtract nodes. Check source and target companies, categorize them into “fisher” (nodes in “from” column) or “wholesaler” (nodes in “to” column).\n\n\n\nShow the code\nmc2_nodes_topkg <- rbind(mc2_edges_topkg %>%\n                                select(from)%>%\n                                rename(id=from) %>%\n                             mutate(group=\"fisher\"),\n                              mc2_edges_topkg %>%\n                                select(to)%>%\n                                rename(id=to) %>%\n                             mutate(group=\"wholesaler\")) %>% distinct()\n\nlookup_topkg <- mc2_nodes_topkg %>%\n  group_by(id) %>%\n  summarise(count=n()) %>%\n  filter(count>1) %>%\n  left_join(mc2_edges_topkg%>%\n              group_by(from)%>%\n              summarise(from_weights= sum(weights)),\n            by=c(\"id\"=\"from\")) %>%\n  left_join(mc2_edges_topkg%>%\n              group_by(to)%>%\n              summarise(to_weights=sum(weights)),\n            by=c(\"id\"=\"to\")) %>%\n  mutate(group=ifelse(from_weights >= to_weights, \"fisher\",\"wholesaler\"))\n\nmc2_nodes_topkg <- mc2_nodes_topkg %>%\n  left_join(lookup_topkg%>%select(id,group),by=\"id\") %>%\n  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%\n  select(-group.y,-group.x) %>%\n  distinct()\n\n\n\nCheck mutual-exclusiveness of category.\n\n\n\nShow the code\nmc2_nodes_topcount %>%\n  group_by(id) %>%\n  summarise(count=n())%>%\n  filter(count>1)\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: id <chr>, count <int>\n\n\n\nBuild interactive network graph.\n\n\n\nShow the code\nvisNetwork(mc2_nodes_topkg,mc2_edges_topkg) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\n\n\n\nDanger\n\n\n\nHere we find the transition pattern is more of directed from one fisher to multiple wholesaler, this may due to the average weight(kg) of the product if relatively higher, so different parts of fish need to sale to different dealers."
  },
  {
    "objectID": "analysis/analysis.html#evaluate-the-sets-of-predicted-knowledge-graph-links-fisheye-has-provided",
    "href": "analysis/analysis.html#evaluate-the-sets-of-predicted-knowledge-graph-links-fisheye-has-provided",
    "title": "Analysis",
    "section": "3.3 Evaluate the sets of predicted knowledge graph links FishEye has provided",
    "text": "3.3 Evaluate the sets of predicted knowledge graph links FishEye has provided\n\n3.3.1 Read provided json files:\nFirstly read all 12 files provided by Fisheye into one table.\n\n\nShow the code\nfiles <- list.files(path = \"data/bundles\", full.names = TRUE)\n\nfisheye_files <- lapply(files, fromJSON)\nfisheyedata <- lapply(fisheye_files, function(json) {\n  json$nodes\n  json$links\n})\n\nfisheye <- bind_rows(fisheyedata)\n\n\n\n\nShow the code\nfisheye_edges <- as_tibble(fisheye) %>%\n  mutate(arrivaldate = ymd(arrivaldate)) %>%\n  mutate(year = year(arrivaldate)) %>%\n  mutate(hscode = as.character(hscode)) %>%\n  select(source, target, generated_by, hscode, arrivaldate, year,weightkg) %>%\n  rename(type = generated_by) %>%\n#  drop_na() %>%\n  distinct()\n\n\nThen check number of edges by year and by “generagted_by” (here I renamed this column as “group”)\n\n\nShow the code\nfisheye_count <-  fisheye_edges %>%\n  select(year,type,weightkg) %>%\n  group_by(year,type) %>%\n  summarise(count= n(),weightkg = sum(weightkg)) %>%\n  arrange(year)\n\nfisheye_count\n\n\n# A tibble: 15 × 4\n# Groups:   year [3]\n    year type          count weightkg\n   <dbl> <chr>         <int>    <int>\n 1  2033 tuna              3       NA\n 2  2034 carp            165  5270060\n 3  2034 catfish         253       NA\n 4  2034 chub_mackerel   153  3347745\n 5  2034 cod2              4   102760\n 6  2034 herring         154  8395075\n 7  2034 lichen           23   146565\n 8  2034 mackerel        134       NA\n 9  2034 pollock         103  2700860\n10  2034 salmon           13   199955\n11  2034 salmon_wgl       92  1924855\n12  2034 shark            19   114745\n13  2034 tuna             52       NA\n14  2035 catfish          24       NA\n15  2035 mackerel         64       NA\n\n\n\n\n3.3.2 Data wrangling for network graph:\n\n\nShow the code\nfisheye_edges_aggregated <- fisheye_edges %>%\n  group_by(source, target, hscode, year, type) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\n\n\n\nShow the code\nfisheye_nodes_extracted <- rbind(fisheye_edges_aggregated %>%\n  select(source,type) %>%\n  rename(id = source), \n  fisheye_edges_aggregated %>%\n  select(target,type) %>%\n  rename(id = target)) %>%\n  distinct()\n\n\n\n\n3.3.3 Visualize graph provided by Fisheye:\n\n\nShow the code\nfisheye_graph <- tbl_graph(nodes = fisheye_nodes_extracted,\n                       edges = fisheye_edges_aggregated,\n                       directed = TRUE)\n\n\n\n\nShow the code\nset_graph_style() \n\nggraph(fisheye_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(linewidth=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(), size = 0.5) +\n  theme(legend.position = 'bottom')+ \n  facet_nodes(~type)+\n  th_foreground(foreground = \"grey90\",  \n                border = TRUE)  \n\n\n\n\n\n\n\n\n\n\n\nMinding Here:\n\n\n\nI will firstly choose those set of links with more nodes. The final choice can be made only after we saw the complementary effect after we add those links to original network.\n\n\n\nBuild network graph for selected set of links:\n\n\n\nShow the code\nselected_links <- c('carp','catfish','chub_mackerel','herring','mackerel','pollock','salmon_wgl')\n\nfisheye_selected_edges <- fisheye_edges_aggregated %>%\n  filter(type %in% selected_links) %>%\n  rename(from = source) %>%\n  rename(to = target) %>%\n  filter(from != to) %>%\n  distinct()\n\nfisheye_selected_nodes <- rbind(fisheye_selected_edges %>%\n                                select(from)%>%\n                                rename(id=from)%>%\n                                  mutate(group = \"fisher\"),\n                                fisheye_selected_edges %>%\n                                select(to)%>%\n                                rename(id=to)%>%\n                                  mutate(group = \"wholesaler\")) %>% distinct()\n\n\n\nExtract nodes and categorize.\n\n\n\nShow the code\nfisheye_lookup <- fisheye_selected_nodes %>%\n  group_by(id) %>%\n  summarise(count=n()) %>%\n  filter(count>1) %>%\n  left_join(fisheye_selected_edges%>%\n              group_by(from)%>%\n              summarise(from_weights= sum(weights)),\n            by=c(\"id\"=\"from\")) %>%\n  left_join(fisheye_selected_edges%>%\n              group_by(to)%>%\n              summarise(to_weights=sum(weights)),\n            by=c(\"id\"=\"to\")) %>%\n  mutate(group=ifelse(from_weights >= to_weights | is.na(to_weights), \"fisher\",\"wholesaler\"))\n\nfisheye_selected_nodes <- fisheye_selected_nodes %>%\n  left_join(fisheye_lookup%>%select(id,group),by=\"id\") %>%\n  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%\n  select(-group.y,-group.x) %>%\n  distinct()\n\n\n\nCheck the mutual exclusiveness of categories\n\n\n\nShow the code\nfisheye_selected_nodes %>%\n  group_by(id) %>%\n  summarise(count=n()) %>%\n  filter(count>1)\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: id <chr>, count <int>\n\n\n\nBuild network graph of selected bundles\n\n\n\nShow the code\nfisheye_selected_graph <- tbl_graph(nodes = fisheye_selected_nodes,\n                       edges = fisheye_selected_edges,\n                       directed = TRUE)\nvisNetwork(fisheye_selected_nodes,fisheye_selected_edges) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "analysis/analysis.html#combine-selected-bundles-with-original-network",
    "href": "analysis/analysis.html#combine-selected-bundles-with-original-network",
    "title": "Analysis",
    "section": "3.4 Combine selected bundles with original network",
    "text": "3.4 Combine selected bundles with original network\n\nCombine edges\n\n\n\nShow the code\nmc2_edges_new <- rbind(fisheye_selected_edges%>%\n                         group_by(from,to,hscode,year) %>%\n                         summarise(weights=sum(weights)),\n                       mc2_edges%>%\n                         group_by(from,to,hscode,year) %>%\n                         summarise(weights=n()))\n\n\n\nCheck any new edges not included in original network:\n\n\n\nShow the code\nanti_join(mc2_edges, mc2_edges_new,by=c('from','to'))\n\n\n# A tibble: 0 × 8\n# ℹ 8 variables: source <chr>, target <chr>, weightkg <int>, hscode <chr>,\n#   arrivaldate <date>, year <dbl>, from <chr>, to <chr>\n\n\n\nCheck hscode distribution:\n\n\n\nShow the code\nhscode_count_new <-  mc2_edges_new %>%\n  filter(year==2034) %>%\n  group_by(hscode) %>%\n  summarise(weights = sum(weights)) %>%\n  distinct() %>%\n  left_join(hscode_count2034%>%select(hscode,count),by='hscode') %>%\n  rename(origin_weights=count) %>%\n  mutate(new_ori_gap=weights-origin_weights) %>%\n  arrange(desc(new_ori_gap)) \nhscode_count_new\n\n\n# A tibble: 3,901 × 4\n   hscode weights origin_weights new_ori_gap\n   <chr>    <int>          <int>       <int>\n 1 160414    9690           9612          78\n 2 841810    8867           8837          30\n 3 870899   14556          14534          22\n 4 950300   15279          15259          20\n 5 392410    7788           7775          13\n 6 392690    7695           7682          13\n 7 940360    7706           7693          13\n 8 640399    7039           7027          12\n 9 210690    4809           4798          11\n10 870323    6936           6925          11\n# ℹ 3,891 more rows\n\n\nShow the code\nhscode_topcount_new <- pull(head(hscode_count_new%>%arrange(desc(weights)), 1),hscode)\nhscode_selected <-  pull(head(hscode_count_new, 1),hscode)\nsprintf(\"hscode with highest number of shipment in new network: %s\", hscode_topcount_new)\n\n\n[1] \"hscode with highest number of shipment in new network: 306170\"\n\n\nShow the code\nsprintf(\"hscode with most change from origin network to new network: %s\", hscode_selected)\n\n\n[1] \"hscode with most change from origin network to new network: 160414\""
  },
  {
    "objectID": "analysis/analysis.html#compare-original-network-with-new-network",
    "href": "analysis/analysis.html#compare-original-network-with-new-network",
    "title": "Analysis",
    "section": "3.5 Compare Original Network with New Network",
    "text": "3.5 Compare Original Network with New Network\n\n3.5.1 Graph of original network\n\nEdge of origin network in 2034 aggregate:\n\n\n\nShow the code\nmc2_edges_aggregated2034 <- mc2_edges %>%\n  filter(year == 2034) %>%\n  group_by(source, target, hscode, from, to) %>%\n  summarise(weights = n(), ave_kg = sum(weightkg)/weights) %>%\n  filter(source!=target) %>%\n  ungroup()\n\nglimpse(mc2_edges_aggregated2034)\n\n\nRows: 150,439\nColumns: 7\n$ source  <chr> \" Direct Herring Company Transit\", \" Direct Herring Company Tr…\n$ target  <chr> \"Caracola Azul NV Nautical\", \"Caracola Azul NV Nautical\", \"Car…\n$ hscode  <chr> \"210690\", \"306170\", \"390110\", \"304610\", \"640220\", \"392310\", \"3…\n$ from    <chr> \" Direct Herring Company Transit\", \" Direct Herring Company Tr…\n$ to      <chr> \"Caracola Azul NV Nautical\", \"Caracola Azul NV Nautical\", \"Car…\n$ weights <int> 1, 1, 1, 1, 1, 3, 4, 6, 1, 1, 3, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1,…\n$ ave_kg  <dbl> 12370.000, 21620.000, 13075.000, 22890.000, 25.000, 2778.333, …\n\n\n\nFind edges of the hscode in 2034 in original network\n\n\n\nShow the code\nmc2_edges_selected <- mc2_edges_aggregated2034 %>%\n  filter(hscode == hscode_selected) %>%\n  group_by(from, to) %>%\n  summarise(weights = sum(weights)) %>%\n  filter(from!=to) %>%\n  filter(weights>12) %>%\n  ungroup\n\n\n\nExtract nodes and categorize\n\n\n\nShow the code\nmc2_nodes_selected <- rbind(mc2_edges_selected %>%\n                                select(from)%>%\n                                rename(id=from) %>%\n                             mutate(group=\"fisher\"),\n                              mc2_edges_selected %>%\n                                select(to)%>%\n                                rename(id=to) %>%\n                             mutate(group=\"wholesaler\")) %>% distinct()\n\nlookup_selected <- mc2_nodes_selected %>%\n  group_by(id) %>%\n  summarise(count=n()) %>%\n  filter(count>1) %>%\n  left_join(mc2_edges_selected%>%\n              group_by(from)%>%\n              summarise(from_weights= sum(weights)),\n            by=c(\"id\"=\"from\")) %>%\n  left_join(mc2_edges_selected%>%\n              group_by(to)%>%\n              summarise(to_weights=sum(weights)),\n            by=c(\"id\"=\"to\")) %>%\n  mutate(group=ifelse(from_weights >= to_weights, \"fisher\",\"wholesaler\"))\n\nmc2_nodes_selected <- mc2_nodes_selected %>%\n  left_join(lookup_selected%>%select(id,group),by=\"id\") %>%\n  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%\n  select(-group.y,-group.x) %>%\n  distinct()\n\n\n\nBuild network graph\n\n\n\nShow the code\nmc2_graph_selected <- tbl_graph(nodes = mc2_nodes_selected,\n                       edges = mc2_edges_selected,\n                       directed = TRUE)\n\nmc2_graph_selected %>%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(width=weights,arrow=TRUE), \n                 alpha=0.8, color=\"lightblue\",\n                 arrow = arrow(length = unit(2, 'mm')), end_cap = circle(0, 'mm')) +\n  scale_edge_width(range = c(0.5, 3)) +\n  geom_node_point(aes(color=group,\n                      size = centrality_degree(mode = \"out\"))) + \n  scale_colour_manual(values=c(\"yellow\",\"steelblue\")) +\n  labs(size= \"Out_degree\")+\n  geom_node_text(aes(label=id), show.legend = FALSE, size=2) +\n  theme_graph()\n\n\n\n\n\n\n\n3.5.2 Graph of new network of the same hscode in 2034\n\nSince the selected bundle are mainly data of 2034, here we will focus on edges of Year 2034.\n\n\n\nShow the code\nmc2_edges_newaggre <- mc2_edges_new %>%\n  filter(year == 2034) %>%\n  group_by(from, to, hscode) %>%\n  summarise(weights = sum(weights)) %>%\n  filter(from!=to) %>%\n#  filter(weights>100) %>%\n  ungroup()\n\nglimpse(mc2_edges_newaggre)\n\n\nRows: 150,733\nColumns: 4\n$ from    <chr> \" Direct Herring Company Transit\", \" Direct Herring Company Tr…\n$ to      <chr> \"Caracola Azul NV Nautical\", \"Caracola Azul NV Nautical\", \"Car…\n$ hscode  <chr> \"210690\", \"306170\", \"390110\", \"304610\", \"640220\", \"392310\", \"3…\n$ weights <int> 1, 1, 1, 1, 1, 3, 4, 6, 1, 1, 3, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1,…\n\n\n\nFind edges of hscode in new network\n\n\n\nShow the code\nmc2_edges_selected_new <- mc2_edges_newaggre %>%\n  filter(hscode == hscode_selected) %>%\n  group_by(from, to) %>%\n  summarise(weights = sum(weights)) %>%\n  filter(from!=to) %>%\n  filter(weights>12) %>%\n  ungroup\n\n\n\nExtract nodes and categorize\n\n\n\nShow the code\nmc2_nodes_selected_new <- rbind(mc2_edges_selected_new %>%\n                                select(from)%>%\n                                rename(id=from) %>%\n                             mutate(group=\"fisher\"),\n                              mc2_edges_selected_new %>%\n                                select(to)%>%\n                                rename(id=to) %>%\n                             mutate(group=\"wholesaler\")) %>% distinct()\n\nlookup_selected_new <- mc2_nodes_selected_new %>%\n  group_by(id) %>%\n  summarise(count=n()) %>%\n  filter(count>1) %>%\n  left_join(mc2_edges_selected_new%>%\n              group_by(from)%>%\n              summarise(from_weights= sum(weights)),\n            by=c(\"id\"=\"from\")) %>%\n  left_join(mc2_edges_selected_new%>%\n              group_by(to)%>%\n              summarise(to_weights=sum(weights)),\n            by=c(\"id\"=\"to\")) %>%\n  mutate(group=ifelse(from_weights >= to_weights, \"fisher\",\"wholesaler\"))\n\nmc2_nodes_selected_new <- mc2_nodes_selected_new %>%\n  left_join(lookup_selected_new%>%select(id,group),by=\"id\") %>%\n  mutate(group = ifelse(!is.na(group.y),group.y,group.x)) %>%\n  select(-group.y,-group.x) %>%\n  distinct()\n\n\n\nBuild network graph\n\n\n\nShow the code\nmc2_graph_selected_new <- tbl_graph(nodes = mc2_nodes_selected_new,\n                       edges = mc2_edges_selected_new,\n                       directed = TRUE)\n\nmc2_graph_selected_new %>%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(width=weights), \n                 alpha=0.8, color=\"lightblue\",\n                 arrow = arrow(length = unit(2, 'mm')), end_cap = circle(0, 'mm')) +\n  scale_edge_width(range = c(0.5,3)) +\n  geom_node_point(aes(color=group, \n                  size = centrality_degree(mode = \"out\"))) + \n  scale_colour_manual(values=c(\"yellow\",\"steelblue\")) +\n  labs(size= \"Out_degree\")+\n  geom_node_text(aes(label=id), show.legend = FALSE, size=2) +\n  theme_graph()\n\n\n\n\n\n\nnodes with outdegree more than 3 in original network\n\n\n\nShow the code\nmc2_graph_selected %>%\n    mutate(centrality = centrality_degree(mode = \"out\")) %>%\n    filter(centrality>5) %>%\n    select(id,group) \n\n\n# A tbl_graph: 4 nodes and 0 edges\n#\n# A rooted forest with 4 trees\n#\n# A tibble: 4 × 2\n  id                                       group \n  <chr>                                    <chr> \n1 Estrella de la Costa SRL                 fisher\n2 Ocean Quest Inc Marine ecology           fisher\n3 Scottish Oysters Flotsam S.p.A. Services fisher\n4 Shou gan  Oyj Overseas                   fisher\n#\n# A tibble: 0 × 3\n# ℹ 3 variables: from <int>, to <int>, weights <int>\n\n\n\nnodes with outdegree more than 3 in new network\n\n\n\nShow the code\nmc2_graph_selected_new %>%\n    mutate(centrality = centrality_degree(mode = \"out\")) %>%\n    filter(centrality>5) %>%\n    select(id,group) \n\n\n# A tbl_graph: 4 nodes and 0 edges\n#\n# A rooted forest with 4 trees\n#\n# A tibble: 4 × 2\n  id                                       group \n  <chr>                                    <chr> \n1 Estrella de la Costa SRL                 fisher\n2 Ocean Quest Inc Marine ecology           fisher\n3 Scottish Oysters Flotsam S.p.A. Services fisher\n4 Shou gan  Oyj Overseas                   fisher\n#\n# A tibble: 0 × 3\n# ℹ 3 variables: from <int>, to <int>, weights <int>\n\n\n\nInteractive graph of original network\n\n\n\nShow the code\nvisNetwork(mc2_nodes_selected,mc2_edges_selected) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\nInteractive graph of new network\n\n\n\nShow the code\nvisNetwork(mc2_nodes_selected_new,mc2_edges_selected_new) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nTry to build community of original network\n\n\nShow the code\nmc2_graph_selected_und <- as.undirected(mc2_graph_selected, mode='collapse')\n\nmc2_graph_selected_no_iso <- igraph::delete.vertices(mc2_graph_selected_und, V(mc2_graph_selected_und)[igraph::degree(mc2_graph_selected_und)==0])\n\ncommunity_selected <- cluster_leading_eigen(graph=mc2_graph_selected_no_iso)\n\nplot(community_selected,mc2_graph_selected_no_iso)\n\n\n\n\n\nTry to build community of new network\n\n\nShow the code\nmc2_graph_selected_und_new <- as.undirected(mc2_graph_selected_new, mode='collapse')\n\nmc2_graph_selected_no_iso_new <- igraph::delete.vertices(mc2_graph_selected_und_new, V(mc2_graph_selected_und_new)[igraph::degree(mc2_graph_selected_und_new)==0])\n\ncommunity_selected_new <- cluster_leading_eigen(graph=mc2_graph_selected_no_iso_new)\n\nplot(community_selected_new,mc2_graph_selected_no_iso_new)"
  },
  {
    "objectID": "VAA_Team8_Project.html",
    "href": "VAA_Team8_Project.html",
    "title": "VAA_Team8_Project",
    "section": "",
    "text": "Illegal, unreported, and unregulated (IUU) fishing refers to fishing activities that are conducted in violation of both national and international fishing regulations (NOAA Fisheries, n.d.). Such fishing activities pose a significant threat to marine biodiversity, and sustainable fisheries. It undermines conservation efforts, leads to overfishing, and negatively impacts the livelihoods of fishing communities.\nTo identify companies who are potentially engaged in such unscrupulous activities, the country of Oceanus has enlisted the help of FishEye International. Using incomplete import and export data of Oceanus' marine and fishing industries, Fisheye was able to generate a knowledge graph, in the hopes of uncovering business relationships and patterns that can aid in the detection of IUU fisheries. While node-link diagrams offered a useful overview of the knowledge graph at a high level, this study aims to create visualizations that offer more detailed insights into patterns involving entities within the knowledge graph.\n\n\n\nWith reference to Mini Challenge 2 of the VAST Challenge 2023, we aim to build an interactive Shiny app in order to answer the following questions:\n\nUse visual analytics to identify temporal patterns for individual entities and between entities in the knowledge graph FishEye created from trade records. Categorize the types of business relationship patterns you find. Limit your response to 600 words and 6 images.\nEvaluate the sets of predicted knowledge graph links FishEye has provided using visual analytics. Which sets are most reliable for completing the graph? Limit your response to 600 words and 6 images.\nIllustrate how your visual analytics approach can be used to identify new patterns and/or anomalies that are present in the knowledge graph after you have added the links you deemed reliable in question 2. Limit your response to 300 words and 4 images.\nIdentify companies that fit a pattern of illegal fishing. Use visualizations to support your conclusions and your confidence in them. Limit your response to 300 words and 4 images.\n\n\n\n\nThe data sets were obtained from the VAST Challenge 2023 website, and consists of a knowledge graph and 12 bundles.\nThe 12 bundles (namely carp, catfish, chub_mackerel, cod2, herring, lichen, mackerel, pollock, salmon, salmon_wgl, shark and tuna) are generated by FishEye International using an AI program, each consisting of link suggestions that can potentially be added to the main graph for additional information.\nThe knowledge graph and the 12 bundles each contain 2 data frames, namely “nodes” and “links”.\n\n\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nId\nUnique ID assigned to each fishing company\n\n\nShpcountry\nCountry the company most often associated with when shipping\n\n\nRcvcountry\nCountry the company most often associated with when receiving\n\n\nDataset\nAlways “MC2”\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\narrivaldate\nDate the shipment arrived at port in YYYY-MM-DD format.\n\n\nhscode\nHarmonized System code for the shipment.\n\n\nvalueofgoods_omu\nCustoms-declared value of the total shipment, in Oceanus Monetary Units (OMU)\n\n\nVolumeteu\nThe volume of the shipment in ‘Twenty-foot equivalent units’.\n\n\nweightkg\nThe weight of the shipment in kilograms.\n\n\ndataset\nAlways ‘MC2’.\n\n\ntype\nAlways “shipment”.\n\n\ngenerated_by\nName of the program that generated the edge. (Only found on ‘bundle’ records.)\n\n\n\n\n\n\n\n\n\n\nEnsuring that the variables are formatted in the correct data type.\nHandling of missing values\nTransformation of variables (e.g. creation of new variables)\nAggregation of edges\n\n\n\n\n\nCheck timeseries distribution of variables.\nCheck hscode with most weights.\nDecide on filtering criteria.\n\n\n\n\n\nDesign website layout\nBuild Shiny according to our analysis\n\n\n\n\n\nshiny: for building interactive web applications\nshinythemes: for customization of the Shiny app\njsonlite: for loading and reading of “.json” files\ntidyverse: a collection of R packages used for data preparation and manipulation\nigraph: for network analysis and visualization\nggraph: an extension of ggplot2 for the creation of network graphs.\nvisNetwork: for creating interactive network graphs\nplotly: for generating interactive charts\n\n\n\n\n\n\n\n\nNetwork Graph Building:\nAn interactive network graph will be created using the visNetwork package. To identify potential major distributors/wholesalers and recipients, we will filter the nodes based on their high out-degree/in-degree edges. Additionally, we will explore networks between the top wholesalers and recipients using different hscodes to observe any variations in patterns among different product categories.\nCentrality of nodes & categorize business relationships:\nTo determine the relationship between companies, metrics such as degree centrality or eigenvector centrality will be computed to measure centrality scores. The scores can be visualized by changing the appearance of the nodes.\nTemporal Pattern Mining:\nBy observing shipping patterns over the same time period, we can then identify any abnormal relationships or patterns among these companies (e.g. companies who do not have any records for multiple years).\n\nThe following diagram is a proposed example of changing the appearance of the nodes based on centrality scores. The bigger the nodes, the higher the degree centrality score, while the darker the nodes, the higher the eigenvector centrality score.\n\n\n\n\nTo determine which of the 12 AI generated bundles can be used to complete the main knowledge graph, facet nodes graphs will be plotted for each bundle. Bundles that provide the most useful information will be selected.\nThe figure below shows an early prototype of our proposed approach. As seen from the figure, cod2, lichen, salmon, shark and tuna bundles contain relatively fewer nodes compared to the other bundles, thus these bundles will not really value-add to our main network graph. Therefore, only bundles excluding the aforementioned bundles (i.e. carp, catfish, chub_mackerel, herring, mackerel, pollock, and salmon_wgl bundles) will be added to our main network graph.\n\n\n\n\nThe links of the selected bundles will be combined with the links of the original knowledge graph. A new interactive network graph will then be created using the visNetwork package, which will allow us to identify any new patterns or anomalies that may emerge when the new links are added. Steps similar to those used in Q1 will be used in the pattern/anomaly detection.\nThe following diagram shows an early prototype of what our updated interactive network graph will look like, in comparison to the original network graph.\n\n\n\n\n\n\n\nOriginal network graph\n\n\n\nNetwork graph with links from selected bundles\n\n\n\n\n\n\n\nWe will use the new patterns/anomalies detected during the previous step to aid in the identification of companies that are potentially suspicious. We will mainly look for:\n\nAfter filtering the edges by hscode, we will check whether clusters of companies trading products of a certain hscode category exhibit any abnormal connection patterns, compared to the trading of products from other hscodes. These abnormal connection patterns may include dense interconnections within a small group of companies, or isolated groups.\nAfter combining the links from the main network with those from the selected bundles, some original missing values can be filled. We will then reevaluate the network graph again to determine if there are companies with high weight but incomplete records for certain years. After identifying the companies with abnormal temporal pattern, we will then utilize interactive visualizations to analyze their data based on specific years or companies. This will allow us to examine how the network connections among these companies change over the years.\n\n\n\n\n\nNOAA Fisheries. (n.d.). Understanding illegal, unreported, and unregulated fishing. NOAA. https://www.fisheries.noaa.gov/insight/understanding-illegal-unreported-and-unregulated-fishing"
  }
]